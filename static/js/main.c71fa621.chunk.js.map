{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","onChangeSelectedTodo","userId","console","log","className","map","todo","id","title","completed","isSelected","cn","type","onClick","TodoFilter","query","onChangeOption","onChangeQuery","onChange","event","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onClearUserId","useState","user","setUser","useEffect","catch","error","Error","statusSelect","href","email","name","App","setTodos","isLoadingTodos","setIsLoadingTodos","selectedTodo","setSelectedTodo","setQuery","option","setOption","visibleTodos","useMemo","handleSelectedTodo","useCallback","handleClearSelectedTodo","handleChangeQuery","handleChangeOption","finally","filter","queryToLower","toLowerCase","trim","includes","findQueryInTheString","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c71fa621.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  userId: number | null;\n  onChangeSelectedTodo: (todo: Todo) => void;\n}\n\nexport const TodoList: FC<Props> = memo((\n  { todos, onChangeSelectedTodo, userId },\n) => {\n  // eslint-disable-next-line no-console\n  console.log('TodoList');\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n          const isSelected = userId === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({ 'has-background-info-light': isSelected })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onChangeSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far', {\n                      'fa-eye': !isSelected,\n                      'fa-eye-slash': isSelected,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import { FC, memo } from 'react';\n\ninterface Props {\n  query: string;\n  onChangeQuery: (event: string) => void;\n  onChangeOption: (event: string) => void;\n}\n\nexport const TodoFilter: FC<Props> = memo((\n  { query, onChangeOption, onChangeQuery },\n) => {\n  const handleClearQuery = () => onChangeQuery('');\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => onChangeOption(event.target.value)}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onChangeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  useEffect, useState, memo, FC,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  onClearUserId: () => void;\n}\n\nexport const TodoModal: FC<Props> = memo(({ todo, onClearUserId }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(\n    () => {\n      getUser(todo.userId)\n        .then(setUser)\n        .catch(error => {\n          throw new Error(error.statusSelect);\n        });\n    },\n    [],\n  );\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user === null ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                onClearUserId();\n                setUser(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import {\n  FC, useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\n\nconst findQueryInTheString = (query: string, title: string) => {\n  const queryToLower = query.toLowerCase().trim();\n  const titleToLower = title.toLowerCase();\n\n  return titleToLower.includes(queryToLower);\n};\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoadingTodos, setIsLoadingTodos] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [option, setOption] = useState('all');\n\n  let visibleTodos = useMemo(() => {\n    return [...todos];\n  }, [todos]);\n\n  const handleSelectedTodo = useCallback((todo: Todo) => (\n    setSelectedTodo(todo)), []);\n  const handleClearSelectedTodo = useCallback(() => setSelectedTodo(null), []);\n  const handleChangeQuery = useCallback((value: string) => setQuery(value), []);\n  const handleChangeOption = useCallback((value: string) => (\n    setOption(value)), []);\n\n  useEffect(\n    () => {\n      getTodos()\n        .then(setTodos)\n        .finally(() => setIsLoadingTodos(false))\n        .catch(error => {\n          throw new Error(`${error} Error`);\n        });\n    },\n    [],\n  );\n\n  if (query) {\n    visibleTodos = visibleTodos.filter(todo => (\n      findQueryInTheString(query, todo.title)));\n  }\n\n  if (option !== 'all') {\n    switch (option) {\n      case 'completed':\n        visibleTodos = visibleTodos.filter(todo => todo.completed === true);\n        break;\n      case 'active':\n        visibleTodos = visibleTodos.filter(todo => todo.completed === false);\n        break;\n      default:\n    }\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onChangeQuery={handleChangeQuery}\n                onChangeOption={handleChangeOption}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingTodos ? (\n                <Loader />\n              ) : (\n                <>\n                  {visibleTodos.length === 0\n                    ? (\n                      <h1>Todos not found...</h1>\n                    ) : (\n                      <TodoList\n                        todos={visibleTodos}\n                        userId={selectedTodo?.id || null}\n                        onChangeSelectedTodo={handleSelectedTodo}\n                      />\n                    )}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo !== null && (\n        <TodoModal\n          todo={selectedTodo}\n          onClearUserId={handleClearSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}